<part id="part:cdk-library">
  <title>The CDK Library</title>

  <chapter id="sect:goal">
      <title>The Goal</title>
      <para>
        The goal of the CDK is to be a library of java classes to support
        java software to solve typical chemical computational and informational
        problems.
      </para>
    </chapter>

    <chapter id="sect:classcategories">
      <title>CDK Modules</title>
      <para>
        All CDK classes are categorized into classes. Currently, these classes
        are defined: cdk-core, cdk-standard, cdk-io, cdk-render,
        cdk-libio and cdk-extra.
      </para>
      <section>
        <title>Core classes</title>
        <para>
          In the cdk-core module the core classes represent chemical entities, like 
          bonds, atoms, molecules, and
          more abstract entities, like connectivity tables, used for in common
          computational and information chemistry.
        </para>
      </section>
      <section>
        <title>Standard classes</title>
        <para>
          The standard classes found in the cdk-standard module are those classes that
          do not store chemical data, but that are used by two or more of the modules
          below, and that are considered basic.
        </para>
      </section>
      <section>
        <title>IO classes</title>
        <para>
          The cdk-io module contains classes for file, internet and database input and
          output.
        </para>
      </section>
      <section>
        <title>Rendering classes</title>
        <para>
          The cdk-render module provides classes for displaying 2D and 3D chemical
          information, and classes that provide ways to have users interact with these
          graphical representations.
        </para>
      </section>
      <section>
        <title>LibIO classes</title>
        <para>
          These classes interface to other (Java) libraries, like JOELib and CMLDOM.
        </para>
      </section>
      <section>
        <title>Extra classes</title>
        <para>
          These are classes that do not belong to either of the other two categories.
        </para>
      </section>

    </chapter>

  <chapter id="sect:compiling">
    <title>Compiling the CDK source</title>

    <para>
      Compiling and jar-ing the software is done with <ulink
      url="http://jakarta.apache.org/ant/">Jakarta's Ant</ulink>.
    </para>

    <para>
      CDK can be compiled with and without support for Java3D.
      How to compile these, is explained in the next two sections.
    </para>

    <section>
      <title>Compiling without Java3D installed</title>
      <para>
        If not Java3D is installed or available for your platform,
        you can compile CDK with:
        <programlisting>
cdk/$ ant
        </programlisting>
      </para>
    </section>

    <section>
      <title>Compiling with Java3D installed</title>
      <para>
        If Java3D is installed or available for your platform,
        you can compile CDK with:
        <programlisting>
cdk/$ ant -Dpathtojava3d=/some/path compile-with-java3d
        </programlisting>
        The parameter pathtojava3d can be used to tell Ant where
        your Java3D installation (read: jar files) can be found.
      </para>
    </section>

    <section>
      <title>Debugging and Optimization</title>
      <para>
        It is useful to compile CDK with debugging information while
        writing and testing new code, but when making a release the code
        must be optimized for speed and size: debugging information must
        be turned off then, and optimization turned on.
        The build.xml file by default compiles with debugging options, but
        this can be overwritten. The next example shows you how to compile
        CDK for release:
        <programlisting>
cdk/$ ant -Ddebug=off -Doptimization=on -Ddeprecation=off dist-all
        </programlisting>
      </para>
    </section>
    
  </chapter>

  <chapter id="sect:testing">
    <title>Testing CDK classes</title>

    <section>
      <title>JUnit testing</title>
      <para>
        After you compiled the code, you can do <command>ant test</command>
        to run the test suite of non-interactive, automated
        tests. You will get output with a part something like:
        <programlisting>
test:
    [junit] Running org.openscience.cdk.test.CDKTests
    [junit] Tests run: 21, Failures: 5, Errors: 0, Time elapsed: 9.63 sec
    [junit] TEST org.openscience.cdk.test.CDKTests FAILED
        </programlisting>
        These tests results in some serious problems.
      </para>

      <para>
        The actual tests are done by
        <ulink url="http://www.junit.org/">JUnit</ulink> which you must have
        installed. JDK 1.4 requires version 3.7, but 3.6 is good for other
        Java versions.
      </para>

      <para>
        An alternative is to install the cdk-test package.
        You can then do tests with
        <programlisting>
$ cdk-test org.openscience.cdk.test.CDKTests
        </programlisting>
      </para>

      <para>
        There are currently two major test suites:
        <itemizedlist>
          <listitem><para>org.openscience.cdk.test.CDKTests</para></listitem>
          <listitem><para>org.openscience.cdk.test.io.cml.CMLIOTests</para></listitem>
        </itemizedlist>
      </para>
    </section>

    <section>
      <title>Interactive tests</title>
      <para>
        There are also run interactive tests, like the Controller2DTest.
        In order to try them, you can edit the "run"
        target in the build.xml file to look like this:
        <programlisting><![CDATA[
          <target name="run" depends="dist">
                <java classname="org.openscience.cdk.test.ControllerTest" fork="yes">
                        <arg value=""/>
                        <classpath>
                                <pathelement location="${dist}/jar/cdk.jar"/>
                                <pathelement path="${java.class.path}"/>
                                <pathelement location="."/>
                                <fileset dir="jar">
                                <include name="*.jar"/>
                                </fileset>
                        </classpath>
                </java>
          </target>
]]></programlisting>
        Then, a <command>ant run</command> should give you a window where you
        can add bonds to a given structure.
      </para>
    </section>
  </chapter>
</part>
