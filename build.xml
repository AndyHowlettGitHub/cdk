<project name="CDK" default="dist-all" basedir=".">

        <property file="build.props"/>

        <!-- compile options -->
        <property name="build.sysclasspath" value="ignore" />
        <property name="build.compiler" value="modern" />
        <property name="debug" value="on" />
        <property name="deprecation" value="on" />
        <property name="optimization" value="off" />

        <!-- patches to apply -->

        <!-- where to find some libraries -->
        <property name="pathtojoelib" value="../../JoeLib/joelib/" />


        <!-- directories -->
        <property name="build" value="build" />
        <property name="build.src" value="${build}/src" />
        <property name="sourcedist" value="sourcedist" />
        <property name="dist" value="dist" />
        <property name="doc" value="doc" />
        <property name="src" value="src" />
        <property name="lib" value="jar" />
        <property name="devellib" value="develjar" />
        <property name="src.tests" value="${src}/org/openscience/cdk/test" />
        <property name="reports.tests" value="reports" />
        <property name="appjars.dir" value="${dist}/appjars" />
        <property name="metainf" value="${src}/META-INF" />
 
        <!-- class to run for testing-->
        <property name="testclass" value="CDKTests" />
        <property name="runclass" value="applications.FileConvertor" />
        <property name="arg1" value="" />
        <property name="arg2" value="" />
        <property name="arg3" value="" />
        <property name="arg4" value="" />

         <property environment="env" />

    <target id="info" name="info" depends="check">
            <!-- Gives information about the building process. -->
            <echo message="Platform:" />
            <echo message="             OS: ${os.name}" />
            <echo message="   Architecture: ${os.arch}" />
            <echo message="        Version: ${os.version}" />
            <echo message=" Mac OS/X found: ${isMacOsX}" />
            <echo message="" />
            <echo message="Java/Ant Environment:" />
            <echo message="   Java version: ${java.version}" />
            <echo message="    Java vendor: ${java.vendor}" />
            <echo message="       Java dir: ${java.home}" />
            <echo message="   Java ext dir: ${java.ext.dirs}" />
            <echo message="    Ant version: ${ant.version}" />
            <echo message="    ${ANT_HOME}: ${ant.home}" />
            <echo message="       hasAnt16: ${hasAnt16}" />
            <echo message="" />
            <echo message="JavaDoc Environment:" />
            <echo message="    SUN JavaDoc: ${sunJavaDoc}" />
            <echo message="  SUN JavaDoc 6: ${sunJavaDoc6}" />
            <echo message="  gjdoc JavaDoc: ${gjdocJavaDoc}" />
            <echo message="" />
            <echo message="CDK Environment:" />
            <echo message="    CDK version: ${version}" />
            <echo message="      build.xml: $Id$" />
            <echo message="  Doclets found: ${docletsAreCompiled}" />
            <echo message="    Junit found: ${junit.present}" />
            <echo message=" --- required libraries ---" />
            <echo message="  Vecmath found: ${vecmath.present}" />
            <echo message="    Log4j found: ${log4j.present}" />
            <echo message="  JGraphT found: ${jgrapht.present}" />
            <echo message=" --- distributed (but optional) libraries ---" />
            <echo message="    Batik found: ${batik.present}" />
            <echo message="   CMLDOM found: ${cmllibs.present}" />
            <echo message="    DADML found: ${dadml.present}" />
            <echo message="      JAI found: ${jai.present}" />
            <echo message="  XIndice found: ${xindice.present}"/>
            <echo message=" --- optional libraries ---" />
            <echo message="     Jmol found: ${jmol.present}" />
            <echo message="   JOELib found: ${joelib.present}" />
            <echo message="" />
            <echo message="Compiling:" />
            <echo message="            for: ${build.compiler}" />
            <echo message="          debug: ${debug}" />
            <echo message="    deprecation: ${deprecation}" />
            <echo message="   optimization: ${optimization}" />
            <echo message="     skipDoclet: ${doSkipDoclet}" />            
        </target>

        <target id="checkPlatforms" name="checkPlatforms">
            <condition property="isMacOsX">
                <and>
                    <os family="mac"/>
                    <os family="unix"/>
                </and>
            </condition>
        </target>
        
        <target id="check" name="check" depends="checkPlatforms">
            <!-- Check wether Doclets are compiled and output is generated -->
            <condition property="docletsAreCompiled">
                <and>
                    <available classname="net.sf.cdk.tools.MakeJavaFilesFilesDoclet" classpath="${doc}/javadoc"/>
                    <available classname="net.sf.cdk.tools.MakeCDKSetFilesDoclet" classpath="${doc}/javadoc"/>
                </and>
            </condition>
            <uptodate property="dotjavafiles.uptodate"
                      targetfile="${src}/core.javafiles">
              <srcfiles dir="${src}" includes="**/*.java" />
            </uptodate>
            <condition property="dotjjfiles.uptodate">
              <and>
                <uptodate property="NomParserJavafiles.uptodate" 
                          targetfile="${src}/org/openscience/cdk/iupac/parser/NomParser.java">
                  <srcfiles dir="${src}" includes="org/openscience/cdk/iupac/parser/NomParser.jj" />
                </uptodate>
                <uptodate property="SMARTSParserJavafiles.uptodate" 
                          targetfile="${src}/org/openscience/cdk/smiles/smarts/SMARTSParser.java">
                  <srcfiles dir="${src}" includes="org/openscience/cdk/smiles/smarts/SMARTSParser.jj" />
                </uptodate>
              </and>
            </condition>
            <condition property="doSkipDoclet">
              <equals arg1="${skipDoclet}" arg2="true"/>
            </condition>

            <!-- Checks which parts of CDK can be build. -->

            <!-- test for optional jars -->
            <available property="vecmath.present"
                       file="${lib}/vecmath1.2-1.14.jar"/>
            <available property="log4j.present"
                       file="${lib}/log4j.jar"/>
            <available property="jgrapht.present"
                       file="${lib}/jgrapht-0.6.0.jar"/>

            <!-- test for optional jars -->
            <condition property="batik.present">
              <and>
                <available file="${lib}/batik-awt-util.jar"/>
                <available file="${lib}/batik-dom.jar"/>
                <available file="${lib}/batik-svggen.jar"/>
                <available file="${lib}/batik-util.jar"/>
                <available file="${lib}/batik-xml.jar"/>
              </and>
            </condition>
            <condition property="cmllibs.present">
              <or>
                <available file="${lib}/jumbo52.jar"/>
              </or>
            </condition>
            <available property="dadml.present"
                       file="${lib}/dadml.jar"/>
            <condition property="jai.present">
              <and>
                <available file="${lib}/jai_codec.jar"/>
                <available file="${lib}/jai_core.jar"/>
              </and>
            </condition>
            <available property="joelib.present"
                       classname="joelib.molecule.JOEAtom" 
                       classpath="${lib}/libio/joelib.jar"/>
            <available property="jmol.present"
                       classname="org.jmol.api.JmolAdapter" 
                       classpath="${lib}/jmolApis.jar"/>
            <available property="junit.present"
                       classname="junit.framework.TestCase"
                       classpath="${ant.home}/lib/junit.jar"/>
            <condition property="xindice.present">
              <and>
                <available file="${lib}/xindice.jar"/>
                <available file="${lib}/xmldb.jar"/>
              </and>
            </condition>

            <!-- test Ant version -->
            <condition property="hasAnt16">
                <contains string="${ant.version}" substring="1.6"/>
            </condition>

            <!-- test Java version -->
            <condition property="isJava13">
                <contains string="${java.version}" substring="1.3"/>
            </condition>
            <condition property="isJava14">
                <contains string="${java.version}" substring="1.4"/>
            </condition>
            <condition property="isJava15">
                <contains string="${java.version}" substring="1.5"/>
            </condition>
            <condition property="isJava16">
                <contains string="${java.version}" substring="1.6."/>
            </condition>
            <condition property="isJava14+">
                <or>
                    <contains string="${java.version}" substring="1.4"/>
                    <contains string="${java.version}" substring="1.5"/>
                    <contains string="${java.version}" substring="1.6"/>
                </or>
            </condition>
            <condition property="isJava15+">
                <or>
                    <contains string="${java.version}" substring="1.5"/>
                    <contains string="${java.version}" substring="1.6"/>
                </or>
            </condition>
            <condition property="isNotJava15+">
                <not>
                  <or>
                    <contains string="${java.version}" substring="1.5"/>
                    <contains string="${java.version}" substring="1.6"/>
                  </or>
            	</not>
            </condition>

            <!-- testing which JavaDoc is present -->
            <condition property="sunJavaDocInExt">
              <or>
                <available file="${java.ext.dirs}/tools.jar" />
              </or>
            </condition>
            <condition property="sunJavaDocInLib">
              <or>
                <available file="${java.home}/lib/tools.jar" />
                <available file="${java.home}/../lib/tools.jar" />
              </or>
            </condition>
            <condition property="sunJavaDoc">
              <and>
                <or>
                  <available file="${java.ext.dirs}/tools.jar" />
                  <available file="${java.home}/../lib/tools.jar" />
                </or>
                <not>
                  <contains string="${java.version}" substring="1.6"/>
                </not>
              </and>
            </condition>
            <condition property="sunJavaDoc6">
              <and>
                <or>
                  <available file="${java.home}/lib/tools.jar" />
                  <available file="${java.home}/../lib/tools.jar" />
                </or>
              	<contains string="${java.version}" substring="1.6"/>
              </and>
            </condition>
            <condition property="gjdocJavaDoc">
              <available file="/usr/share/java/gnu-classpath-tools-gjdoc.jar" />
            </condition>

        </target>


        <target id="init" name="init" depends="check, setupBuildDir"/>
        <target id="customize" name="customize" depends="javacc"/>

        <target id="setupBuildDir" name="setupBuildDir">
                <tstamp />
                <mkdir dir="${build}" />
                <mkdir dir="${sourcedist}" />
                <mkdir dir="${dist}" />
                <mkdir dir="${reports.tests}" />
        </target>

        <target id="clean" name="clean" description="Removes autogenerated files.">
                <delete>
                    <fileset dir="." includes="**/*~" />
                    <fileset dir="." includes="*.tar.gz" />
                    <fileset dir="." includes="*.zip" />
                    <fileset dir="." includes="*.rda" />
                    <fileset dir="${src}" includes="*.classes" />
                    <fileset dir="${src}" includes="*.javafiles">
                        <exclude name="jmol*.javafiles" />
                    </fileset>
                    <fileset dir="${src}" includes="*.entitylist" />
                    <!-- remove java files generated with JavaCC -->
                    <fileset dir="${src}/org/openscience/cdk/smiles/smarts" includes="*.java" />
                    <fileset dir="${src}/org/openscience/cdk/iupac/parser" includes="*.java">
                        <!-- the next are from CVS -->
                        <exclude name="AttachedGroup.java" />
                        <exclude name="MoleculeBuilder.java" />
                    </fileset>
                    <fileset dir="${doc}">
                        <include name="javadoc/net/sf/cdk/tools/*.class" /> 
                    </fileset>
                </delete>

                <delete dir="${build}" />
                <delete dir="${sourcedist}" />
                <delete dir="${dist}" />
                <delete dir="${reports.tests}" />
        </target>

        <target name="compileDoclet" id="compileDoclet" depends="check" unless="docletsAreCompiled">
             <echo>Compiling doclets in doc/javadoc that are required for compiling CDK...</echo>
             <antcall target="compileDoclet.MacOSX"/>
             <antcall target="compileDoclet.gjDoc" />
             <antcall target="compileDoclet.sunJavaDoc" />
             <antcall target="compileDoclet.sunJavaDoc6" />
        </target>

        <target name="compileDoclet.MacOSX" id="compileDoclet.MacOSX" if="isMacOsX">
            <javac srcdir="doc/javadoc/source" destdir="doc/javadoc"
                   includes="MakeJavaFilesFilesDoclet.java, MakeCDKSetFilesDoclet.java" />
        </target>

        <target name="compileDoclet.sunJavaDoc6" id="compileDoclet.sunJavaDoc6" if="sunJavaDoc6" unless="isMacOsX">
            <javac srcdir="doc/javadoc/source" destdir="doc/javadoc" 
                   includes="MakeJavaFilesFilesDoclet.java, MakeCDKSetFilesDoclet.java">
                <classpath>
                  <fileset dir="${java.home}/lib">
                    <include name="tools.jar" if="sunJavaDocInLib"/>
                  </fileset>
                  <fileset dir="${java.home}/../lib">
                    <include name="tools.jar" if="sunJavaDocInLib"/>
                  </fileset>
                </classpath>
            </javac>
        </target>

    <target name="compileDoclet.sunJavaDoc" id="compileDoclet.sunJavaDoc" if="sunJavaDoc" unless="isMacOsX">
        <javac srcdir="doc/javadoc/source" destdir="doc/javadoc" 
               includes="MakeJavaFilesFilesDoclet.java, MakeCDKSetFilesDoclet.java">
            <classpath>
              <fileset dir="${java.ext.dirs}">
                <include name="tools.jar" if="sunJavaDocInExt"/>
              </fileset>
              <fileset dir="${java.home}/lib">
                <include name="tools.jar" if="sunJavaDocInLib"/>
              </fileset>
              <fileset dir="${java.home}/../lib">
                <include name="tools.jar" if="sunJavaDocInLib"/>
              </fileset>
            </classpath>
        </javac>
    </target>

        <target name="compileDoclet.gjDoc" id="compileDoclet.gjDoc" if="gjdocJavaDoc">
          <javac srcdir="doc/javadoc/source" destdir="doc/javadoc" 
                 includes="MakeJavaFilesFilesDoclet.java, MakeCDKSetFilesDoclet.java">
            <classpath>
              <fileset dir="/usr/share/java">
                <include name="com-sun-javadoc.jar" if="gjdocJavaDoc"/>
              </fileset>
            </classpath>
          </javac>
        </target>

        <target name="runDoclet" id="runDoclet" 
                depends="check, customize" unless="doSkipDoclet">
          <echo>Not skipping doclet run...</echo>
          <antcall target="reallyRunDoclet"/>
          <antcall target="failIfNoDocletResults"/>
        </target>

        <target name="checkDocletResults" id="checkDocletResults">
            <condition property="dotjavafiles.uptodate">
                <and>
                    <available file="${src}/data.javafiles" />
                    <available file="${src}/core.javafiles" />
                    <available file="${src}/standard.javafiles" />
                    <available file="${src}/extra.javafiles" />
                    <available file="${src}/io.javafiles" />
                </and>
            </condition>
        </target>

        <target name="failIfNoDocletResults" id="failIfNoDocletResults" depends="checkDocletResults" unless="dotjavafiles.uptodate">
            <fail>
              There seems to be a problem with building the cdk/src/*.javafiles.
              Often this is caused by malformed java source code, so please check the output
              of the reallyRunDoclet target (ant reallyRunDoclet).
              
              If there is no reported source code error, please report this to 
              cdk-devel@lists.sf.net and send the output of
              this command: ant -v info runDoclet.
            </fail>
        </target>
        
        <target name="reallyRunDoclet" id="reallyRunDoclet" depends="compileDoclet" unless="dotjavafiles.uptodate">
            <javadoc private="true"  maxmemory="128m">
                <classpath>
                    <fileset dir="${lib}">
                        <include name="*.jar" />
                    	<!-- some jars require some Java version -->
                    	<exclude name="jumbo50.jar" unless="isJava15"/>
                    </fileset>
                    <fileset dir="${lib}/libio">
                        <include name="*.jar" />
                    </fileset>
                    <fileset dir="${devellib}">
                        <include name="*.jar" />
                    </fileset>
                </classpath>

                <doclet name="net.sf.cdk.tools.MakeJavaFilesFilesDoclet" path="${doc}/javadoc"/>

                <packageset dir="${src}">
                    <include name="org/openscience/cdk/**"/>
                </packageset>

            </javadoc>
            <javadoc private="true" maxmemory="128m">
                <classpath>
                    <fileset dir="${lib}">
                        <include name="*.jar" />
                    	<!-- some jars require some Java version -->
                    	<exclude name="jumbo50.jar" unless="isJava15"/>
                    </fileset>
                    <fileset dir="${lib}/libio">
                        <include name="*.jar" />
                    </fileset>
                    <fileset dir="${devellib}">
                        <include name="*.jar" />
                    </fileset>
                </classpath>

                <doclet name="net.sf.cdk.tools.MakeCDKSetFilesDoclet" path="${doc}/javadoc"/>

                <packageset dir="${src}">
                    <include name="org/openscience/cdk/**"/>
                </packageset>

            </javadoc>
            <move todir="${src}" failonerror="true">
                <fileset dir=".">
                  <include name="*.javafiles"/>
                  <include name="*.classes"/>
                  <include name="*.set"/>
                  <include name="*.entitylist"/>
                </fileset>
            </move>
        </target>
        
        <target id="compile-needed-test" name="compile-needed-test">
            <uptodate property="module-uptodate" targetfile="${dist}/jar/cdk-${module}.jar">
                <srcfiles dir="${src}">
                    <includesfile name="${src}/${module}.javafiles"/>
                </srcfiles>
            </uptodate>
        </target>

        <target id="compile-init" name="compile-init" 
                depends="init, check, runDoclet"/>

        <target id="compile-module" name="compile-module" 
                depends="check, dist.init, compile-needed-test"
                unless="module-uptodate">
            
            <echo message="Compiling classes for CDK's ${module} module." />
            
            <!-- check for availability for meta info files -->
            <available file="${metainf}/${module}.datafiles" property="module.datafiles.present"/>
            <available file="${metainf}/${module}.extrafiles" property="module.extrafiles.present"/>
            <available file="${metainf}/${module}.cdkdepends" property="module.cdkdepends.present"/>
            <available file="${metainf}/${module}.libdepends" property="module.libdepends.present"/>
            <available file="${metainf}/${module}.devellibdepends" property="module.devellibdepends.present"/>
        
            <!-- be somewhat informative -->
            <echo message="Datafiles defined: ${module.datafiles.present}"/>
            <echo message="Extra files defined: ${module.extrafiles.present}"/>
            <echo message="CDK dependencies defined: ${module.cdkdepends.present}"/>
            <echo message="Library dependencies defined: ${module.libdepends.present}"/>
            <echo message="Developer Library dependencies defined: ${module.devellibdepends.present}"/>
            
            <!-- normally javac compiles not just the given files, but also missing
                 classes that are in the same src/ directory. By making a copy first,
                 we explicitely make it impossible to compile files that are not
                 marked for a specific module -->
            <delete dir="${build}"/>
            <mkdir dir="${build}"/>
            <mkdir dir="${build.src}"/>
            <copy todir="${build.src}">
                <fileset dir="${src}">
                    <excludesfile name="${src}/java1.4+.javafiles" if="isJava13"/>
                    <!-- excludesfile name="${src}/java1.4.javafiles" unless="isJava14"/ -->
                    <!-- excludesfile name="${src}/java1.5.javafiles" unless="isJava15"/ -->
                    <excludesfile name="${src}/java1.5+.javafiles" if="isNotJava15"/>
                    <excludesfile name="${src}/ant1.6.javafiles" unless="hasAnt16"/>
                    <excludesfile name="${src}/jai.javafiles" unless="jai.present"/>
                    <excludesfile name="${src}/dadml.javafiles" unless="dadml.present"/>
                    <excludesfile name="${src}/xindice.javafiles" unless="xindice.present"/>

                    <includesfile name="${src}/${module}.javafiles"/>
                </fileset>
            </copy>
            
            <!-- ok, now that we have a copy, compile this copy -->
            <javac srcdir="${build.src}" destdir="${build}" optimize="${optimization}" 
                    debug="${debug}" deprecation="${deprecation}" target="1.3" source="1.3">
                <classpath>
                    <fileset dir="${lib}" >
                        <exclude name="**/*" unless="module.libdepends.present" />
                        <includesfile name="${metainf}/${module}.libdepends" if="module.libdepends.present" />
                    </fileset>
                    <fileset dir="${devellib}">
                        <exclude name="**/*" unless="module.devellibdepends.present" />
                        <includesfile name="${metainf}/${module}.devellibdepends" if="module.devellibdepends.present" />
                    </fileset>
                    <fileset dir="${dist}/jar">
                        <exclude name="**/*" unless="module.cdkdepends.present" />
                        <includesfile name="${metainf}/${module}.cdkdepends" if="module.cdkdepends.present" />
                    </fileset>
                </classpath>
            
                <excludesfile name="${src}/java1.4+.javafiles" if="isJava13"/>
                <!-- excludesfile name="${src}/java1.4.javafiles" unless="isJava14"/ -->
                <!-- excludesfile name="${src}/java1.5.javafiles" unless="isJava15"/ -->
                <excludesfile name="${src}/java1.5+.javafiles" if="isNotJava15"/>
                <excludesfile name="${src}/ant1.6.javafiles" unless="hasAnt16"/>
            	<excludesfile name="${src}/jai.javafiles" unless="jai.present"/>
            	<excludesfile name="${src}/dadml.javafiles" unless="dadml.present"/>
            	<excludesfile name="${src}/xindice.javafiles" unless="xindice.present"/>
            
                <includesfile name="${src}/${module}.javafiles"/>
            </javac>
            
            <!-- and then jar things up into the module jar -->
            <jar jarfile="${dist}/jar/cdk-${module}.jar">
                <fileset dir="${build}">
                    <includesfile name="${src}/${module}.classes" />
                    <excludesfile name="${src}/java1.4+.classes" if="isJava13"/>
                    <!-- excludesfile name="${src}/java1.4.classes" unless="isJava14"/ -->
                    <!-- excludesfile name="${src}/java1.5.javafiles" unless="isJava15"/ -->
                    <excludesfile name="${src}/java1.5+.javafiles" if="isNotJava15"/>
                    <excludesfile name="${src}/ant1.6.classes" unless="hasAnt16"/>
	                <excludesfile name="${src}/jai.javafiles" unless="jai.present"/>
                	<excludesfile name="${src}/dadml.javafiles" unless="dadml.present"/>
                	<excludesfile name="${src}/xindice.javafiles" unless="xindice.present"/>
               </fileset>
               <fileset dir="${src}">
                    <include name="${module}.javafiles" />
               </fileset>
               <fileset dir="${src}">
                    <exclude name="**/*" unless="module.datafiles.present"/>
                    <includesfile name="${metainf}/${module}.datafiles" if="module.datafiles.present" />
               </fileset>
               <fileset dir="${src}">
                    <exclude name="**/*" unless="module.extrafiles.present"/>
                    <includesfile name="${metainf}/${module}.extrafiles" if="module.extrafiles.present" />
               </fileset>
            </jar>
       </target>

        <!-- Convert the JavaCC .jj file to the correct .java files for the IUPAC parser -->
        <target id="javacc" name="javacc" depends="init, check" if="hasAnt16" unless="dotjjfiles.uptodate">
          <echo message="Compiling Ant 1.6 depending classes." />
          <!-- the IUPAC name parser -->
          <delete>
              <fileset id="javacc-generated" 
                dir="${src}/org/openscience/cdk/iupac/parser/" 
                includes="NomParser*.java,ParseException.java,SimpleCharStream.java,Token.java,TokenMgrError.java"/>
          </delete>
          <javacc target="${src}/org/openscience/cdk/iupac/parser/NomParser.jj" 
            outputdirectory="${src}/org/openscience/cdk/iupac/parser/" 
            javacchome="${lib}"/>
          <delete>
              <fileset id="javacc-generated" 
              dir="${src}/org/openscience/cdk/smiles/smarts/" 
              includes="*.java"/>
          </delete>
          <javacc target="${src}/org/openscience/cdk/smiles/smarts/SMARTSParser.jj" 
            outputdirectory="${src}/org/openscience/cdk/smiles/smarts/" 
            javacchome="${lib}"/>
        </target>

        <target id="dist.init" name="dist.init">
            <mkdir dir="${dist}/jar" />
        </target>

	    <target id="dist-joelib" name="dist-joelib" depends="nocompile-joelib, compile-joelib"/>
	    <target id="nocompile-joelib" name="nocompile-joelib" unless="${joelib.present}">
	      <echo message="JOELib is not found. Removed depending functionality. JOELib can be downloaded from http://joelib.sf.net/."/>
	    </target>
        <target id="compile-joelib" name="compile-joelib" if="${joelib.present}">
        	<antcall target="compile-module"><param name="module" value="libio-joelib"/></antcall>
	    </target>
	
    <target id="dist-jmol" name="dist-jmol" depends="nocompile-jmol, compile-jmol"/>
    <target id="nocompile-jmol" name="nocompile-jmol" unless="${jmol.present}">
      <echo message="Jmol is not found. Removed depending functionality. Jmol can be downloaded from http://www.jmol.org/."/>
    </target>
    <target id="compile-jmol" name="compile-jmol" if="${jmol.present}">
    	<antcall target="compile-module"><param name="module" value="io-jmol"/></antcall>
    </target>

    <target id="dist-java3d" name="dist-java3d" depends="nocompile-java3d, compile-java3d"/>
    <target id="nocompile-java3d" name="nocompile-java3d" unless="${java3d.present}">
      <echo message="Java3d is not found. Removed depending functionality. Java3d can be downloaded from http://java.sun.com/."/>
    </target>
    <target id="compile-java3d" name="compile-java3d" if="${java3d.present}">
    	<antcall target="compile-module"><param name="module" value="java3d"/></antcall>
    </target>

        <target id="dist-optional" name="dist-optional" depends="dist-all"
        	description="Compile CDK modules that require optional libraries">
        	<antcall target="dist-java3d"/>
        	<antcall target="dist-jmol"/>
      		<antcall target="dist-joelib"/>
        </target>

    <target id="dist-all" name="dist-all" description="dist-all">
            <antcall target="compile-init"/>
            <antcall target="compile-module"><param name="module" value="interfaces"/></antcall>
            <antcall target="compile-module"><param name="module" value="core"/></antcall>
            <antcall target="compile-module"><param name="module" value="standard"/></antcall>
            <antcall target="compile-module"><param name="module" value="data"/></antcall>
            <antcall target="compile-module"><param name="module" value="datadebug"/></antcall>
            <antcall target="compile-module"><param name="module" value="nonotify"/></antcall>
            <antcall target="compile-module"><param name="module" value="render"/></antcall>
            <antcall target="compile-module"><param name="module" value="io"/></antcall>
            <antcall target="compile-module"><param name="module" value="pdb"/></antcall>
            <antcall target="compile-module"><param name="module" value="valencycheck"/></antcall>
            <antcall target="compile-module"><param name="module" value="extra"/></antcall>
            <antcall target="compile-module"><param name="module" value="smiles"/></antcall>
            <antcall target="compile-module"><param name="module" value="libio-cml"/></antcall>
       	    <antcall target="compile-module"><param name="module" value="libio-weka"/></antcall>
            <antcall target="compile-module"><param name="module" value="libio-openbabel"/></antcall>
            <antcall target="compile-module"><param name="module" value="pdb-cml"/></antcall>
            <antcall target="compile-module"><param name="module" value="reaction"/></antcall>
    	    <antcall target="compile-module"><param name="module" value="charges"/></antcall>
            <antcall target="compile-module"><param name="module" value="qsar"/></antcall>
            <antcall target="compile-module"><param name="module" value="qsar-cml"/></antcall>
            <antcall target="compile-module"><param name="module" value="qsar-pdb"/></antcall>
            <antcall target="compile-module"><param name="module" value="forcefield"/></antcall>
            <antcall target="compile-module"><param name="module" value="builder3d"/></antcall>
            <antcall target="compile-module"><param name="module" value="svg"/></antcall>
            <antcall target="compile-module"><param name="module" value="experimental"/></antcall>
            <antcall target="compile-module"><param name="module" value="applications"/></antcall>
        </target>

	<target id="test-dist-all" name="test-dist-all" description="test-dist-all">
        <antcall target="compile-init"/>
        <antcall target="compile-module"><param name="module" value="test-core"/></antcall>
        <antcall target="compile-module"><param name="module" value="test-standard"/></antcall>
        <antcall target="compile-module"><param name="module" value="test-data"/></antcall>
        <antcall target="compile-module"><param name="module" value="test-datadebug"/></antcall>
        <antcall target="compile-module"><param name="module" value="test-nonotify"/></antcall>
        <antcall target="compile-module"><param name="module" value="test-io"/></antcall>
        <antcall target="compile-module"><param name="module" value="test-extra"/></antcall>
        <antcall target="compile-module"><param name="module" value="test-smiles"/></antcall>
        <antcall target="compile-module"><param name="module" value="test-libio-weka"/></antcall>
        <antcall target="compile-module"><param name="module" value="test-reaction"/></antcall>
        <antcall target="compile-module"><param name="module" value="test-forcefield"/></antcall>
        <antcall target="compile-module"><param name="module" value="test-valencycheck"/></antcall>
        <antcall target="compile-module"><param name="module" value="test-experimental"/></antcall>
        <antcall target="compile-module"><param name="module" value="test-qsar"/></antcall>
		<antcall target="compile-module"><param name="module" value="test-pdb"/></antcall>
        <antcall target="compile-module"><param name="module" value="test-osjvmts"/></antcall>
	</target>

	<target id="dist-large" name="dist-large" depends="dist-all" 
            description="Builds on big jar file for the CDK, including experimental classes.">
            
            <!-- first unjar the CDK and other jars we need -->
            <delete dir="${build}"/>
            <mkdir dir="${build}"/>
            <mkdir dir="${appjars.dir}"/>
            <unjar dest="${appjars.dir}">
                <fileset dir="${lib}">
                    <includesfile name="${metainf}/applications.libdepends"/>
                    <includesfile name="${metainf}/builder3d.libdepends"/>
                    <includesfile name="${metainf}/charges.libdepends"/>
                    <includesfile name="${metainf}/core.libdepends"/>
                    <includesfile name="${metainf}/datadebug.libdepends"/>
                    <includesfile name="${metainf}/data.libdepends"/>
                    <includesfile name="${metainf}/experimental.libdepends"/>
                    <includesfile name="${metainf}/extra.libdepends"/>
                    <includesfile name="${metainf}/io-jmol.libdepends"/>
                    <includesfile name="${metainf}/io.libdepends"/>
                    <includesfile name="${metainf}/libio-cml.libdepends"/>
                    <includesfile name="${metainf}/libio-weka.libdepends"/>
                    <includesfile name="${metainf}/nonotify.libdepends"/>
                    <includesfile name="${metainf}/pdb-cml.libdepends"/>
                    <includesfile name="${metainf}/pdb.libdepends"/>
                    <includesfile name="${metainf}/qsar.libdepends"/>
                    <includesfile name="${metainf}/qsar-cml.libdepends"/>
                    <includesfile name="${metainf}/qsar-pdb.libdepends"/>
                    <includesfile name="${metainf}/reaction.libdepends"/>
                    <includesfile name="${metainf}/render.libdepends"/>
                    <includesfile name="${metainf}/standard.libdepends"/>
                    <includesfile name="${metainf}/svg.libdepends"/>
                    <includesfile name="${metainf}/valencycheck.libdepends"/>
		    <includesfile name="${metainf}/forcefield.libdepends"/>
                </fileset>
                <fileset dir="${dist}/jar">
                    <include name="cdk-applications.jar"/>
                    <include name="cdk-builder3d.jar"/>
                    <include name="cdk-charges.jar"/>
                    <include name="cdk-core.jar"/>
                    <include name="cdk-datadebug.jar"/>
                    <include name="cdk-data.jar"/>
                    <include name="cdk-experimental.jar"/>
                    <include name="cdk-extra.jar"/>
                    <include name="cdk-interfaces.jar"/>
                    <include name="cdk-io.jar"/>
                    <include name="cdk-io-jmol.jar"/>
                    <include name="cdk-libio-cml.jar"/>
                    <include name="cdk-libio-weka.jar"/>
                    <include name="cdk-nonotify.jar"/>
                    <include name="cdk-pdb-cml.jar"/>
                    <include name="cdk-pdb.jar"/>
                    <include name="cdk-qsar.jar"/>
                    <include name="cdk-qsar-cml.jar"/>
                    <include name="cdk-qsar-pdb.jar"/>
                    <include name="cdk-reaction.jar"/>
                    <include name="cdk-render.jar"/>
                    <include name="cdk-standard.jar"/>
                    <include name="cdk-svg.jar"/>
                    <include name="cdk-valencycheck.jar"/>
                    <include name="cdk-forcefield.jar"/>
                    <include name="cdk-smiles.jar"/>
                </fileset>
            </unjar>

            <!-- then zip up things -->
            <tstamp>
                <format property="TODAY_SVN" pattern="yyyyMMdd" locale="en" />
            </tstamp>
            <jar jarfile="${dist}/jar/cdk-svn-${TODAY_SVN}.jar">
                <manifest>
                    <attribute name="Main-Class" value="org.openscience.cdk.applications.DistLargeInfo"/>
                    <section name="org.openscience.cdk">
                        <attribute name="Specification-Title" value="The Chemistry Development Kit"/>
                        <attribute name="Specification-Version" value="1.0"/>
                        <attribute name="Specification-Vendor" value="The CDK Project"/>
                        <attribute name="Implementation-Title" value="org.openscience.cdk"/>
                        <attribute name="Implementation-Version" value="${version}"/>
                        <attribute name="Implementation-Vendor" value="The CDK Project"/>
                    </section>
                </manifest>
                <fileset dir="${appjars.dir}">
                    <include name="**/*" />
                </fileset>
            </jar>
        </target>

        <target id="sourcedist" name="sourcedist" depends="init, runDoclet"
                description="Builds the source packages.">
            <tstamp>
                <format property="TODAY_SVN" pattern="yyyyMMdd" locale="en" />
            </tstamp>
                <property name="package" value="cdk-source-${TODAY_SVN}"/>
                <property name="sourcedist.dir" value="${sourcedist}/${package}"/>
                <copy todir="${sourcedist.dir}/${src}">
                        <fileset dir="${src}" includes="*.javafiles" />
                        <fileset dir="${src}" includes="*.classes" />
                        <fileset dir="${src}" includes="*.set" />
                        <fileset dir="${src}" includes="**/*.java" />
                        <fileset dir="${src}" includes="**/*.jj" />
                        <fileset dir="${src}" includes="org/openscience/cdk/io/cml/data/**" />
                </copy>
                <copy todir="${sourcedist.dir}">
                        <fileset dir="." includes="build.props" />
                        <fileset dir="." includes="build.xml" />
                        <fileset dir="." includes="javadoc.xml" />
                        <fileset dir="." includes="README" />
                        <fileset dir="." includes="changelog*" />
                </copy>
                <copy todir="${sourcedist.dir}/jar">
                        <fileset dir="jar">
                            <exclude name="libio/*.jar"/>
                        </fileset>
                </copy>
            <copy todir="${sourcedist.dir}/develjar">
                    <fileset dir="develjar">
                        <exclude name="pmd-1.8.jar"/>
                        <exclude name="doccheck.jar"/>
                        <exclude name="dbdoclet*.*"/>
                    </fileset>
            </copy>
                <copy todir="${sourcedist.dir}/src/data">
                        <fileset dir="src/data" />
                </copy>
            <copy todir="${sourcedist.dir}/src/META-INF">
                    <fileset dir="src/META-INF" />
            </copy>
                <copy tofile="${sourcedist.dir}/doc/javadoc/source//MakeJavaFilesFilesDoclet.java"
                      file="doc/javadoc/source/MakeJavaFilesFilesDoclet.java"/>
                <copy todir="${sourcedist.dir}/${src}/org/openscience/cdk/config/data/">
                        <fileset dir="${src}/org/openscience/cdk/config/data/"
                                 includes="*" />
                </copy>
                <copy
                  file="${src}/org/openscience/cdk/iupac/generator/data/IUPACNames.properties"
                  tofile="${sourcedist.dir}/${src}/org/openscience/cdk/iupac/generator/data/IUPACNames.properties" />
                <copy
                  file="${src}/org/openscience/cdk/dict/data/chemical.xml"
                  tofile="${sourcedist.dir}/${src}/org/openscience/cdk/dict/data/chemical.xml" />
                <copy 
                  file="${src}/org/openscience/cdk/dict/data/elements.xml"
                  tofile="${sourcedist.dir}/${src}/org/openscience/cdk/dict/data/elements.xml" />
                <mkdir dir="${sourcedist.dir}/${src}/org/openscience/cdk/qsar/model/data/"/>
                <copy todir="${sourcedist.dir}/${src}/org/openscience/cdk/qsar/model/data/">
                    <fileset dir="${src}/org/openscience/cdk/qsar/model/data/" includes="*.R"/>
                </copy>
                <mkdir dir="${sourcedist.dir}/${src}/org/openscience/cdk/modeling/forcefield/data/"/>
                <copy todir="${sourcedist.dir}/${src}/org/openscience/cdk/modeling/forcefield/data/">
                    <fileset dir="${src}/org/openscience/cdk/modeling/forcefield/data/" includes="*.prm"/>
                </copy>
            <mkdir dir="${sourcedist.dir}/${src}/org/openscience/cdk/modeling/builder3d/data/"/>
            <copy todir="${sourcedist.dir}/${src}/org/openscience/cdk/modeling/builder3d/data/">
                <fileset dir="${src}/org/openscience/cdk/modeling/builder3d/data/" includes="*.gz"/>
            </copy>
                <copy todir="${sourcedist.dir}/${src}/">
                    <fileset dir="${src}/" includes="*.manifest" />
                </copy>
                <mkdir dir="${sourcedist.dir}/doc/" />
                <copy todir="${sourcedist.dir}/doc/">
                    <fileset dir="doc/" includes="lgpl.license" />
                </copy>
                <mkdir dir="${sourcedist.dir}/doc/javadoc" />
                <copy todir="${sourcedist.dir}/doc/javadoc">
                    <fileset dir="doc/javadoc" includes="MakeJavaFilesFilesDoclet.class" />
                    <fileset dir="doc/javadoc" includes="MakeCDKSetFilesDoclet.class" />
                </copy>
                <tar tarfile="${package}.tar" basedir="${sourcedist}/" includes="${package}/**" />
                <gzip zipfile="${package}.tar.gz" src="${package}.tar" />
                <delete file="${package}.tar" />
                <zip zipfile="${package}.zip" basedir="${sourcedist}/" includes="${package}/**" />
        </target>

        <target id="noJunit" name="noJunit" depends="check" unless="junit.present">
            <fail message="JUnit is not installed in Ant. Please copy cdk/develjar/junit.jar to ${ant.home}/lib/."/>
        </target>
        
		<target id="test-module" name="test-module" depends="noJunit"
	                description="Performs a full JUnit test for the CDK." 
	                if="junit.present">

            <echo message="Testing classes for CDK's ${module} module." />
            
            <!-- check for availability for meta info files -->
            <available file="${metainf}/test-${module}.cdkdepends" property="module.cdkdepends.present"/>
            <available file="${metainf}/test-${module}.libdepends" property="module.libdepends.present"/>
			<available file="${metainf}/test-${module}.devellibdepends" property="module.devellibdepends.present"/>        
			
            <!-- be somewhat informative -->
            <echo message="CDK dependencies defined: ${module.cdkdepends.present}"/>
            <echo message="Library dependencies defined: ${module.libdepends.present}"/>
			<echo message="Developer Library dependencies defined: ${module.devellibdepends.present}"/>

			<mkdir dir="${reports.tests}"/>
            <junit printsummary="yes" haltonfailure="no" fork="yes" maxmemory="256m">
                <classpath>
                     <fileset dir="${lib}" >
                         <exclude name="**/*" unless="module.libdepends.present" />
                         <includesfile name="${metainf}/test-${module}.libdepends" if="module.libdepends.present" />
                     </fileset>
                     <fileset dir="${devellib}">
                         <exclude name="**/*" unless="module.devellibdepends.present" />
                         <includesfile name="${metainf}/test-${module}.devellibdepends" if="module.devellibdepends.present" />
                     </fileset>
                     <fileset dir="${dist}/jar">
                         <exclude name="**/*" unless="module.cdkdepends.present" />
                         <includesfile name="${metainf}/test-${module}.cdkdepends" if="module.cdkdepends.present" />
                         <include name="cdk-test-${module}.jar" />
                     </fileset>
                 </classpath>
              	 <test name="org.openscience.cdk.test.M${module}Tests"
            	     haltonfailure="no"
            	     todir="${reports.tests}"
            	     outfile="result-${module}">
            	     <formatter type="brief" />
            	 </test>
			</junit>
	    </target>
			
        <target id="test-all" name="test-all" depends="noJunit, dist-all, test-dist-all"
                description="Performs a full JUnit test for the CDK." 
                if="junit.present">
        	<antcall target="test-module"><param name="module" value="core"/></antcall>
        	<antcall target="test-module"><param name="module" value="data"/></antcall>
        	<antcall target="test-module"><param name="module" value="datadebug"/></antcall>
        	<antcall target="test-module"><param name="module" value="nonotify"/></antcall>
        	<antcall target="test-module"><param name="module" value="standard"/></antcall>
        	<antcall target="test-module"><param name="module" value="io"/></antcall>
            <antcall target="test-module"><param name="module" value="forcefield"/></antcall> 
	        <antcall target="test-module"><param name="module" value="extra"/></antcall>
        	<antcall target="test-module"><param name="module" value="valencycheck"/></antcall> 
        	<antcall target="test-module"><param name="module" value="reaction"/></antcall>  
        	<antcall target="test-module"><param name="module" value="libioweka"/></antcall>
            <antcall target="test-module"><param name="module" value="smiles"/></antcall> 
        	<antcall target="test-module"><param name="module" value="experimental"/></antcall> 
        	<antcall target="test-module"><param name="module" value="qsar"/></antcall> 
        	<antcall target="test-module"><param name="module" value="pdb"/></antcall> 
        </target>

        <target id="limitations" name="limitations" depends="noJunit, dist-all"
                description="Performs a JUnit tests that indicate limitations of certain CDK algorithms/classes.">
                <junit printsummary="yes" haltonfailure="yes" fork="yes">
                    <classpath>
                        <fileset dir="${dist}/jar">
                                <include name="cdk-*.jar" />
                        </fileset>
                        <fileset dir="${lib}">
                                <include name="*.jar" />
                        </fileset>
                        <fileset dir="${devellib}">
                                <include name="*.jar" />
                        </fileset>
                        <fileset dir="${lib}/libio">
                                <include name="*.jar" />
                        </fileset>
                    </classpath>
                        <test name="org.openscience.cdk.test.limitations.AlgorithmLimitations"
                        haltonfailure="no"
                        todir="${reports.tests}"
                        outfile="limitations">
                                <formatter type="brief" />
                        </test>
                </junit>
        </target>

        <target id="run-test" name="run-test" depends="dist-all,test-dist-all" 
                description="Runs one specific JUnit test suite (org.openscience.cdk.test.&lt;class>) as a standalone application with -Dtestclass=&lt;class>.">
                <echo message="Running test class: testclass=${testclass}"/>
                <java classname="org.openscience.cdk.test.${testclass}" fork="yes" maxmemory="512m">
                    <jvmarg value="-Dcdk.debugging=true"/>
                    <classpath>
                        <fileset dir="${dist}/jar/">
                                <include name="*.jar" />
                        </fileset>
                        <fileset dir="${lib}">
                                <include name="*.jar" />
                        </fileset>
                        <fileset dir="${devellib}">
                                <include name="*.jar" />
                        </fileset>
                        <fileset dir="${lib}/libio">
                                <include name="*.jar" />
                        </fileset>
                    </classpath>
                </java>
        </target>

        <target id="junit-test" name="junit-test" depends="dist-all,test-dist-all,noJunit" 
                description="Runs one specific JUnit test suite (org.openscience.cdk.test.&lt;class>) with -Dtestclass=&lt;class>.">
                <echo message="JUnit tests class: testclass=${testclass}"/>
                <junit printsummary="yes" haltonfailure="no" fork="yes">
                    <jvmarg value="-Dcdk.debugging=true"/>
                    <jvmarg value="-Dcdk.debug.stdout=true"/>
                    <classpath>
                        <fileset dir="${dist}/jar/">
                                <include name="*.jar" />
                        </fileset>
                        <pathelement path="${java.class.path}" />
                        <pathelement location="." />
                        <fileset dir="${lib}">
                                <include name="*.jar" />
                        </fileset>
                        <fileset dir="${devellib}">
                                <include name="*.jar" />
                        </fileset>
                        <fileset dir="${lib}/libio">
                                <include name="*.jar" />
                        </fileset>
                    </classpath>
                    <test name="org.openscience.cdk.test.${testclass}"
                        haltonfailure="no"
                        todir="${reports.tests}"
                        outfile="result.${testclass}">
                        <formatter type="brief" />
                    </test>
                </junit>
        </target>

        <target id="run" name="run" depends="dist-all" 
                description="Runs an application (org.openscience.cdk.&lt;class>) with -Drunclass=&lt;class>.">
                <java classname="org.openscience.cdk.${runclass}" fork="yes" >
                    <!--jvmarg value="-Dcdk.debugging=true"/>
                    <jvmarg value="-Dcdk.debug.stdout=true"/-->
 
		    <arg value="${arg1}" />
                   <arg value="${arg2}" />
                   <arg value="${arg3}" />
                   <arg value="${arg4}" />
                   <classpath>
                        <fileset dir="${dist}/jar">
                                <include name="*.jar" />
                        </fileset>
                        <fileset dir="${lib}">
                                <include name="*.jar" />
                        </fileset>
                        <fileset dir="${lib}/libio">
                                <include name="*.jar" />
                        </fileset>
                    </classpath>
                </java>
        </target>

</project>
