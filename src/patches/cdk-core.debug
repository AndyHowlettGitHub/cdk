--- src/org/openscience/cdk/Molecule.java	2003-07-08 10:28:02.824274000 +0200
+++ src/org/openscience/cdk/Molecule.java.debug	2003-08-07 16:44:29.746038000 +0200
@@ -29,6 +29,13 @@
  * Represents the concept of a chemical molecule, an object composed of 
  * atoms connected by bonds.
  *
+ * <p><b>CORE-DEBUG</b><br>
+ * This class has debug facilities. While normal CDK core classes do not
+ * supply any validation of chemical correctness. The CDK core-debug classes 
+ * are supposed to do this. They can be used while software is being developed
+ * to provide debug information by the core classes, and check for problems
+ * that might lead to problems in helper classes.
+ *
  * @author     steinbeck
  * @created    2000-10-02
  *
@@ -85,6 +92,22 @@
                 }
                 return o;
         }
+
+    public void addBond(Bond bond) {
+        // check that all 
+        Atom[] atoms = bond.getAtoms();
+        for (int i=0; i<atoms.length; i++) {
+            if (!this.contains(atoms[i])) {
+                throw new IncorrectUseOfCDKCoreClassError(
+                    "You are trying to add a bond to this molecule between atoms that " +
+                    "are not found in this Molecule"
+                );
+            }
+        }
+        
+        super.addBond(bond);
+    }
+    
 }
 
 
--- src/org/openscience/cdk/AtomContainer.java	2003-07-02 13:27:34.000000000 +0100
+++ src/org/openscience/cdk/AtomContainer.java.debug	2003-08-12 16:53:57.000000000 +0100
@@ -146,6 +146,16 @@
 	 */
 	public void setAtomAt(int number, Atom atom)
 	{
+        if (atom == null) {
+            throw new IncorrectUseOfCDKCoreClassError(
+                "You are trying to add a null Atom to this AtomContainer"
+            );
+        }
+        if (number > atoms.length) {
+            throw new IncorrectUseOfCDKCoreClassError(
+                "You cannot put an Atom outside the current array"
+            );
+        }
 		atoms[number] = atom;
 	}
 
@@ -159,6 +169,11 @@
 	 */
 	public Atom getAtomAt(int number)
 	{
+        if (number > atoms.length) {
+            throw new IncorrectUseOfCDKCoreClassError(
+                "You cannot get an Atom from outside the current array"
+            );
+        }
 		return atoms[number];
 	}
 
@@ -172,6 +187,11 @@
 	 */
 	public Bond getBondAt(int number)
 	{
+        if (number > bonds.length) {
+            throw new IncorrectUseOfCDKCoreClassError(
+                "You cannot get an Bond outside of the current array"
+            );
+        }
 		return getBonds()[number];
 	}
 
@@ -186,6 +206,16 @@
 	 */
 	public void setElectronContainerAt(int number, ElectronContainer ec)
 	{
+        if (ec == null) {
+            throw new IncorrectUseOfCDKCoreClassError(
+                "You are trying to add a null Atom to this AtomContainer"
+            );
+        }
+        if (number > atoms.length) {
+            throw new IncorrectUseOfCDKCoreClassError(
+                "You cannot put an Atom outside the current array"
+            );
+        }
 		electronContainers[number] = ec;
 	}
 
@@ -199,6 +229,11 @@
 	 */
 	public void setElectronContainerCount(int electronContainerCount)
 	{
+        if (electronContainerCount < 0) {
+            throw new IncorrectUseOfCDKCoreClassError(
+                "An AtomContainer cannot contain a negative number of ElectronContainer's"
+            );
+        }
 		this.electronContainerCount = electronContainerCount;
 	}
 
@@ -211,6 +246,11 @@
 	 */
 	public void setAtomCount(int atomCount)
 	{
+        if (atomCount < 0) {
+            throw new IncorrectUseOfCDKCoreClassError(
+                "An AtomContainer cannot contain a negative number of Atom's"
+            );
+        }
 		this.atomCount = atomCount;
 	}
 
@@ -314,6 +354,11 @@
 	 */
 	public LonePair[] getLonePairs(Atom atom)
 	{
+        if (!contains(atom)) {
+            throw new IncorrectUseOfCDKCoreClassError(
+                "The given Atom does not exist in the AtomContainer"
+            );
+        }
 		Vector lps = new Vector();
 		for (int i = 0; i < getElectronContainerCount(); i++)
 		{
@@ -336,6 +381,11 @@
 	 */
 	public Atom getFirstAtom()
 	{
+        if (atomCount < 1) {
+            throw new IncorrectUseOfCDKCoreClassError(
+                "Cannot request first Atom in empty AtomContainer"
+            );
+        }
 		return atoms[0];
 	}
 
@@ -347,6 +397,11 @@
 	 */
 	public Atom getLastAtom()
 	{
+        if (atomCount < 1) {
+            throw new IncorrectUseOfCDKCoreClassError(
+                "Cannot request last Atom in empty AtomContainer"
+            );
+        }
 		return atoms[getAtomCount() - 1];
 	}
 
@@ -416,6 +471,11 @@
 	 */
 	public ElectronContainer getElectronContainerAt(int number)
 	{
+        if (number > electronContainers.length-1) {
+            throw new IncorrectUseOfCDKCoreClassError(
+                "You cannot get an ElectronContainer from outside the current array"
+            );
+        }
 		return electronContainers[number];
 	}
 
--- src/org/openscience/cdk/SetOfReactions.java	2003-08-12 16:30:25.000000000 +0100
+++ src/org/openscience/cdk/SetOfReactions.java.debug	2003-08-12 17:00:28.000000000 +0100
@@ -82,6 +82,11 @@
 	 * @param  reaction  The reaction to be added to this container 
 	 */
 	public void addReaction(Reaction reaction) {
+        if (reaction == null) {
+            throw new IncorrectUseOfCDKCoreClass(
+                "An null Reaction cannot be added to this SetOfReactions"
+            );
+        }
 		if (reactionCount + 1 >= reactions.length) growReactionArray();
 		reactions[reactionCount] = reaction;
 		reactionCount++;
