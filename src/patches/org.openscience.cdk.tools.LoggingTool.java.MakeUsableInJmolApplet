--- src/org/openscience/cdk/tools/LoggingTool.java	2003-09-04 11:41:59.612452000 +0200
+++ src/org/openscience/cdk/tools/LoggingTool.java.JmolApplet	2003-09-04 11:41:26.398364000 +0200
@@ -32,7 +32,6 @@
     private boolean debug = false;
     private boolean tostdout = false;
 
-    private Object logger;
     private String classname;
     
     /** Default number of StackTraceElements to be printed by debug(Exception) */
@@ -46,61 +45,8 @@
 
     public LoggingTool(String classname) {
         this.classname = classname;
-        try {
-            logger = org.apache.log4j.Category.getInstance( classname );
-            /****************************************************************
-             * believe it or not this code has a purpose
-             * The MSFT jvm throws a ClassNotFoundException instead of
-             * a NoClassDefFoundError. But the compiler will not allow the
-             * catch of ClassNotFoundException because it doesn't think
-             * that anybody is going to throw it. So, we will put in this
-             * little trick ...
-             ****************************************************************/
-            if (false)
-              throw new ClassNotFoundException();
-            if (useConfig) {
-                // configure Log4J
-                URL url = getClass().getClassLoader().getResource("/org/openscience/cdk/config/log4j.properties");
-                InputStream ins = this.getClass().getClassLoader().getResourceAsStream("org/openscience/cdk/config/log4j.properties");
-                Properties props = new Properties();
-                props.load(ins);
-                org.apache.log4j.PropertyConfigurator.configure(props);
-            }
-        } catch (ClassNotFoundException e) {
-            tostdout = true;
-            debug("Log4J class not found!");
-        } catch (NoClassDefFoundError e) {
-            tostdout = true;
-            debug("Log4J class not found!");
-        } catch (NullPointerException e) {
-            tostdout = true;
-            debug("Properties file not found!");
-        } catch (Exception e) {
-            tostdout = true;
-        }
-        /****************************************************************
-         * but some JVMs (i.e. MSFT) won't pass the SecurityException to
-         * this exception handler. So we are going to check the JVM
-         * version first
-         ****************************************************************/
+        tostdout = true;
         debug = false;
-        String strJvmVersion = System.getProperty("java.version");
-        if (strJvmVersion.compareTo("1.2") >= 0) {
-          // Use a try {} to catch SecurityExceptions when used in applets
-          try {
-            // by default debugging is set off, but it can be turned on
-            // with starting java like "java -Dcdk.debugging=true"
-            if (System.getProperty("cdk.debugging", "false").equals("true")) {
-              debug = true;
-            }
-            if (System.getProperty("cdk.debug.stdout", "false").equals("true")) {
-              tostdout = true;
-            }
-          } catch (Exception e) {
-            // guess what happens: security exception from applet runner
-            // do not debug in those cases
-          }
-        }
     }
 
     public void dumpSystemProperties() {
@@ -124,70 +72,23 @@
     }
 
     public void debug(Exception exception) {
-        StackTraceElement[] stack = exception.getStackTrace();
-        String string = "Exception: " + exception.toString();
-        this.debug(string);
-        for (int i=0; i<stack.length; i++) {
-            string = "       in: " + stack[i].getClassName() +
-                     "." + stack[i].getMethodName();
-            String filename = stack[i].getFileName();
-            if (filename != null) {
-                string = string + "(" + filename + " line: " +
-                         stack[i].getLineNumber() + ")";
-            }
-            this.debug(string);
-            if (i == this.stackLength) i = stack.length;
-        }
     }
     
     public void debug(String s) {
-        if (debug) {
-            if (tostdout) {
-                toSTDOUT("DEBUG", s);
-            } else {
-                ((org.apache.log4j.Category)logger).debug(s);
-            }
-        }
     }
 
     public void error(String s) {
-        if (debug) {
-            if (tostdout) {
-                toSTDOUT("ERROR", s);
-            } else {
-                ((org.apache.log4j.Category)logger).error(s);
-            }
-        }
+        toSTDOUT("ERROR", s);
     }
 
     public void fatal(String s) {
-        if (debug) {
-            if (tostdout) {
-                toSTDOUT("FATAL", s);
-            } else {
-                ((org.apache.log4j.Category)logger).fatal(s);
-            }
-        }
+        toSTDOUT("FATAL", s);
     }
 
     public void info(String s) {
-        if (debug) {
-            if (tostdout) {
-                toSTDOUT("INFO", s);
-            } else {
-                ((org.apache.log4j.Category)logger).info(s);
-            }
-        }
     }
 
     public void warn(String s) {
-        if (debug) {
-            if (tostdout) {
-                toSTDOUT("WARN", s);
-            } else {
-                ((org.apache.log4j.Category)logger).warn(s);
-            }
-        }
     }
     
     private void toSTDOUT(String level, String message) {
